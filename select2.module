<?php
/**
 * @file
 * Main file for Select2 module.
 */

/**
 * Implements hook_menu().
 */
function select2_menu() {
  $items['admin/config/user-interface/select2'] = array(
    'title'            => 'Select2',
    'description'      => 'Customize the default display of Select2 elements throughout the site.',
    'page callback'    => 'backdrop_get_form',
    'page arguments'   => array('select2_settings_form'),
    'access arguments' => array('administer select2'),
    'file'             => 'select2.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_permission().
 *
 * Adds a new permission limiting which users can change Select2 integration
 * settings.
 */
function select2_permission() {
  return array(
    'administer select2' => array(
      'title' => t('Administer Select2 settings'),
      'description' => t('Change where and how Select2 is included on a page.'),
    ),
  );
}

/**
 * Implements hook_library_info().
 */
function select2_library_info() {
  $path = backdrop_get_path('module', 'select2');
  $min = (config_get('select2.settings', 'compression_type') === 'minified') ? '.min' : '';

  $libraries['select2'] = array(
    'title' => 'Select2',
    'website' => 'http://ivaynberg.github.io/select2',
    'version' => '3.5.2',
    'js' => array(
      $path . '/lib/select2' . $min . '.js' => array(),
    ),
    'css' => array(
      $path . '/lib/select2' . $min . '.css' => array(),
    ),
  );
  $libraries['backdrop.select2'] = array(
    'title' => 'Select2 integration',
    'js' => array(
      $path . '/js/select2-integration.js' => array('weight' => 1000),
    ),
    'css' => array(
      $path . '/css/select2-integration.css'
    ),
  );

  return $libraries;
}

/**
 * Implements hook_element_info_alter().
 */
function select2_element_info_alter(&$type) {

  if (isset($type['select'])) {
    $type['select']['#process'][] = 'select2_process_select_element';
  }

  if (isset($type['textfield'])) {
    $type['textfield']['#process'][] = 'select2_process_textfield';
  }

}

/**
 * Select element process.
 */
function select2_process_select_element($element, &$form_state) {
  if (!empty($element['#select2_processed'])) {
    return $element;
  }

  if (!isset($element['#select2']) && config_get('select2.settings', 'use_for_all_select_elements')) {
    if (!_select2_current_path_is_admin() || config_get('select2.settings', 'use_for_all_select_elements_for_admin_pages')) {
      $element['#select2'] = _select2_default_settings();
    }
  }

  if (!isset($element['#select2'])) {
    $element['#select2_processed'] = TRUE;
    return $element;
  }

  if ((!isset($element['#required']) || !$element['#required']) && !isset($element['#select2']['allowClear'])) {
    $element['#select2']['allowClear'] = TRUE;
  }

  if (isset($element['#options']) && is_array($element['#options'])) {
    foreach ($element['#options'] as $key => $value) {
      if (is_string($value)) {
        $element['#options'][$key] = htmlspecialchars_decode($value);
      }
    }
  }

  if ((!isset($element['#select2']['placeholder']) || !$element['#select2']['placeholder'])) {
    if (isset($element['#empty_option'])) {
      $element['#select2']['placeholder'] = $element['#empty_option'];
    }
    elseif (isset($element['#options']['_none'])) {
      $element['#select2']['placeholder'] = $element['#options']['_none'];
      $element['#options'] = array('' => $element['#options']['_none']) + $element['#options'];
      unset($element['#options']['_none']);
    }
  }

  $element['#attributes']['data-use-select2'] = 'true';
  $element['#pre_render'][] = 'select2_pre_render';
  $element['#select2_processed'] = TRUE;
  return $element;
}

/**
 * Process textfield.
 */
function select2_process_textfield($element, &$form_state) {
  if (empty($element['#autocomplete_path']) || !empty($element['#select_2_processed']) || !config_get('select2.settings', 'use_for_autocomplete_elements')) {
    return $element;
  }

  if (!isset($element['#select2'])) {
    $element['#select2'] = array();
  }

  $select2_settings = array(
    'containerCssClass'  => 'select2-autocomplete',
  );
  if (!isset($element['#required']) || !$element['#required']) {
    $select2_settings['allowClear'] = TRUE;
  }

  $element['#attributes']['data-use-select2-autocomplete'] = url($element['#autocomplete_path']);
  $element['#select2'] = array_merge($select2_settings, $element['#select2']);
  $element['#pre_render'][] = 'select2_pre_render';
  $element['#select_2_processed'] = TRUE;

  // Disable the normal Backdrop autocomplete.
  $element['#autocomplete_path'] = NULL;

  return $element;
}

/**
 * Return the path to the Select2 plugin.
 */
function select2_get_plugin_path() {
  static $library_path = NULL;

  // Try to locate the library path in any possible setup.
  if ($library_path == NULL) {
    // First check the default location.
    $path = config_get('select2.settings', 'select2_plugin_path');
    if ($path && is_dir($path)) {
      $library_path = $path;
    }
    // If no path is found suggest the default one.
    elseif ($library_path == NULL) {
      $library_path = backdrop_get_path('module', 'select2') . '/lib';
    }
  }

  return $library_path;
}

/**
 * Implements hook_field_widget_info_alter().
 */
function select2_field_widget_info_alter(&$info) {

  if (!isset($info['options_select'])) {
    return;
  }

  $info['options_select']['settings']['use_select2'] = FALSE;

}

/**
 * Adds Select2 module JavaScript additions and language files.
 */
function select2_pre_render($element = NULL) {
  global $user, $language, $base_root;
  $config = config('select2.settings');

  // Check if this element is excluded.
  if (isset($element['#id'])) {
    $ids = explode("\n", $config->get('excluded_ids'));
    if (in_array($element['#id'], $ids)) {
      return $element;
    }
  }
  if (isset($element['#attributes']['class'])) {
    $classes = explode("\n", $config->get('excluded_classes'));
    if (in_array($element['#attributes']['class'], $classes)) {
      return $element;
    }
  }

  // Add required libraries.
  $element['#attached']['library'][] = array('select2', 'select2');
  $element['#attached']['library'][] = array('select2', 'backdrop.select2');
  if ($element['#select2']['sortable']) {
    $element['#attached']['library'][] = array('system', 'ui.sortable');
  }

  // Add language library if found.
  $langcode = '';
  if (isset($user->langcode) && $user->langcode) {
    $langcode = $user->langcode;
  }
  elseif (isset($language) && isset($language->langcode)) {
    $langcode = $language->language;
  }
  if ($langcode) {
    $translation_file = select2_get_plugin_path() . '/i18n/' . $langcode . '.js';
    if (file_exists($translation_file)) {
      $element['#attached']['js'][] = $translation_file;
    }
  }

  // Convert the #select2 values to data attributes.
  $properties = select2_expand_data_attributes($element['#select2']);
  $element['#attributes'] += $properties;
  dsm($element['#attributes']);

  // This function is used as a #pre_render callback, so we have to return the
  // passed-in element, if provided.
  return $element;
}

/**
 * Convert an array of options into data attributes.
 */
function select2_expand_data_attributes($options, $prefix = 'data-') {
  $data = array();
  foreach ($options as $key => $value) {
    $lower_key = select2_camel_case_to_hyphen($key);
    if (is_array($value)) {
      $data[$prefix . $lower_key] = select2_expand_data_attributes($value, $prefix . $lower_key . '--');
    }
    else {
      $data[$prefix . $lower_key] = $value;
    }
  }
  return $data;
}

/**
 * Convert a string from camelCase to hyphens.
 */
function select2_camel_case_to_hyphen($input) {
  preg_match_all('!([A-Z][A-Z0-9]*(?=$|[A-Z][a-z0-9])|[A-Za-z][a-z0-9]+)!', $input, $matches);
  $ret = $matches[0];
  foreach ($ret as &$match) {
    $match = $match == strtoupper($match) ? strtolower($match) : lcfirst($match);
  }
  return implode('-', $ret);
}

/**
 * Default settings.
 *
 * @return array
 *   Default settings.
 */
function _select2_default_settings() {
  return array(
    'separator'               => ',',
    'sortable'                => FALSE,
    'dropdownAutoWidth'       => TRUE,
    'width'                   => 'element',
    'containerCssClass'       => '',
    'minimumResultsForSearch' => config_get('select2.settings', 'min_options_count_for_search'),
  );
}

/**
 * Determines whether a current path is in the administrative section of the site.
 *
 * By default, paths are considered to be non-administrative. If a path does
 * not match any of the patterns in path_get_admin_paths(), or if it matches
 * both administrative and non-administrative patterns, it is considered
 * non-administrative.
 *
 * @return
 *   TRUE if the path is administrative, FALSE otherwise.
 *
 * @see path_get_admin_paths()
 * @see hook_admin_paths()
 * @see hook_admin_paths_alter()
 */
function _select2_current_path_is_admin() {
  $result = &backdrop_static(__FUNCTION__, NULL);

  if ($result !== NULL){
    return $result;
  }

  if (path_is_admin(current_path())) {
    $result = TRUE;
    return $result;
  }

  // AJAX check
  if (!empty($_SERVER['HTTP_X_REQUESTED_WITH'])
      && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest'
      && !empty($_SERVER['HTTP_REFERER'])) {

    // Need to check request referrer url for admin path.

    $referrer_url = $_SERVER['HTTP_REFERER'];

    $site_url_prefix = url(NULL, array('absolute' => TRUE)) . (config_get('system.core', 'clean_url') ? '' : '?q=');

    $prefix_pos = strpos($referrer_url, $site_url_prefix);

    if ($prefix_pos === FALSE || $prefix_pos > 0) {
      $result = FALSE;
      return $result;
    }

    $referrer_url_path = str_replace($site_url_prefix, '', $referrer_url);
    if (path_is_admin($referrer_url_path)) {
      $result = TRUE;
      return $result;
    }
  }

  $result = FALSE;
  return $result;
}
